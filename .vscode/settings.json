/*
 *                   ___====-_  _-====___
 *             _--^^^#####//      \\#####^^^--_
 *          _-^##########// (    ) \\##########^-_
 *         -############//  |\^^/|  \\############-
 *       _/############//   (@::@)   \############\_
 *      /#############((     \\//     ))#############\
 *     -###############\\    (oo)    //###############-
 *    -#################\\  / VV \  //#################-
 *   -###################\\/      \//###################-
 *  _#/|##########/\######(   /\   )######/\##########|\#_
 *  |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|
 *  `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '
 *     `   `  `      `   / | |  | | \   '      '  '   '
 *                      (  | |  | |  )
 *                     __\ | |  | | /__
 *                    (vvv(VVV)(VVV)vvv)
 * 
 *      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * 
 *                神兽保佑            永无BUG
 */

{
    "C_Cpp.autocomplete": "Default",
    "C_Cpp.updateChannel": "Insiders", 
    "C_Cpp.default.intelliSenseMode": "gcc-x64", 
    "C_Cpp.default.cppStandard": "c++17", 
    "files.autoSave": "afterDelay", 
    "C_Cpp.default.includePath": [
     "/usr/local/include",
     "${workspaceFolder}", 
    ], 
    "C_Cpp.default.cStandard": "c11", 
    "cmake.configureOnOpen": false, 
    "[cpp]": {
     "editor.formatOnSave": false, 
     "editor.defaultFormatter": "ms-vscode-remote.remote-wsl",
     "editor.quickSuggestions": true
    },
    "[c]": {
     "editor.formatOnSave": false, 
     "editor.defaultFormatter": "ms-vscode-remote.remote-wsl",
     "editor.quickSuggestions": true
    },
    "gitlens.gitCommands.closeOnFocusOut": true,
    "C_Cpp.commentContinuationPatterns": [
   
     "/**"
    ],
    "C_Cpp.default.compilerPath": "/usr/bin/g++",
    // Controls if quick suggestions should show up while typing
    "editor.quickSuggestions": {
     "other": true,
     "comments": false,
     "strings": false
   },
   
    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
   "editor.acceptSuggestionOnCommitCharacter": true,
   
   // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
   "editor.acceptSuggestionOnEnter": "on",
   
   // Controls the delay in ms after which quick suggestions will show up.
   "editor.quickSuggestionsDelay": 10,
   
   // Controls if suggestions should automatically show up when typing trigger characters
   "editor.suggestOnTriggerCharacters": true,
   
   // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
   "editor.tabCompletion": "on",
   
   // Controls whether sorting favours words that appear close to the cursor
   "editor.suggest.localityBonus": true,
   
   // Controls how suggestions are pre-selected when showing the suggest list
   "editor.suggestSelection": "recentlyUsed",
   
   // Enable word based suggestions
   "editor.wordBasedSuggestions": true,
   
   "editor.minimap.maxColumn": 40,
   
   "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?·～！￥…（）—【】、；：‘'“”，。《》？ ",
   
   // Enable parameter hints
   "editor.parameterHints.enabled": true,
   
   
  "files.autoGuessEncoding": true,
  "files.associations": {
    "stacksequence_dynamic.h": "c",
    "random": "c",
    "sstream": "c",
    "sqqueue.h": "c",
    "linkqueue.h": "c",
    "typeinfo": "c",
    "algheap.h": "c",
    "stdbool.h": "c",
    "graphqueue.h": "c"
  },
  "C_Cpp.errorSquiggles": "Enabled",
 
   }